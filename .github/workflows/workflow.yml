name: Deployment Prod

on: [push]

jobs:
  Test:
    uses: https://algnot.github.io/amara-testing/.github/workflows/trigger-test.yml@main
    with:
      commit_sha: ${{ github.sha }}
      repo_url: https://github.com/${{ github.repository }}
    secrets: inherit

  Deploy:
    needs: Test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: tonkla-vm-deploy-env

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Cloudflared
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Authenticate Cloudflare Tunnel
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_TUNNEL_CREDENTIALS }}" > ~/.cloudflared/credentials.json
          echo "${{ secrets.CLOUDFLARED_TUNNEL_SECRETKEY }}" > ~/.cloudflared/cert.pem

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLOUDFLARED_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Sync Environment
        run: |
          cat > .env << EOF
          FLASK_RUN_PORT=9000
          FLASK_RUN_HOST=0.0.0.0
          FLASK_RUN_DEBUG=true
          
          APP_PORT=9002
          APP_VERSION=${{ github.sha }}
          APP_ENV=production
          
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
          
          cat ./.env | ssh -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} 'cat > ~/server/amara-backend/.env'

      - name: Access Server
        run: |
          ssh -tt -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} << EOF
          
          set -e
          cd server/amara-backend/
          git fetch --all 
          git reset --hard origin/main 
          
          docker system prune
          docker image prune -a -f
          docker compose -p amara-prod up --build -d
          
          exit